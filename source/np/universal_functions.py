"""


[title]: # (Универсальные функции)


Универсальные функции
=====================

Операции с векторами и матрицами
--------------------------------

    >>> import numpy as np

Вектор

    >>> x = np.arange(5)
    >>> x
    array([0, 1, 2, 3, 4])

Умножение вектора на скаляр

    >>> x * 2
    array([0, 2, 4, 6, 8])

    >>> y = np.array([2, 2, 2, 2, 2])
    >>> y
    array([2, 2, 2, 2, 2])

Усножение вектора поэлементно

    >>> x * y
    array([0, 2, 4, 6, 8])

Возведение всех элементов матрицы в квадрат

    >>> a = np.arange(9).reshape((3, 3))
    >>> a
    array([[0, 1, 2],
           [3, 4, 5],
           [6, 7, 8]])

    >>> a ** 2
    array([[ 0,  1,  4],
           [ 9, 16, 25],
           [36, 49, 64]])

Часть матричного уравнения

    >>> -(0.5 * a) ** 2
    array([[ -0.  ,  -0.25,  -1.  ],
           [ -2.25,  -4.  ,  -6.25],
           [ -9.  , -12.25, -16.  ]])

ABS
---

Модули всех элементов вектора

    >>> z = np.arange(-5, 0)
    >>> z
    array([-5, -4, -3, -2, -1])
    >>> abs(z)
    array([5, 4, 3, 2, 1])

Вектор комплексных чисел

    >>> c = np.array([1 - 1j, 2 - 1j, -5 + 1j])
    >>> c
    array([ 1.-1.j,  2.-1.j, -5.+1.j])
    >>> abs(c)
    array([ 1.41421356,  2.23606798,  5.09901951])

Тригонометрия
-------------

    >>> theta = np.linspace(0, np.pi, 3)
    >>> theta
    array([ 0.        ,  1.57079633,  3.14159265])
    >>> np.sin(theta)
    array([  0.00000000e+00,   1.00000000e+00,   1.22464680e-16])

Экспонента
----------

    >>> x = np.array([1, 2, 3])
    >>> np.exp(x)
    array([  2.71828183,   7.3890561 ,  20.08553692])
    >>> np.exp2(x)
    array([ 2.,  4.,  8.])

Логарифм
--------

    >>> x = [1, 2, 4, 10]
    >>> np.log(x)
    array([ 0.        ,  0.69314718,  1.38629436,  2.30258509])
    >>> np.log2(x)
    array([ 0.        ,  1.        ,  2.        ,  3.32192809])
    >>> np.log10(x)
    array([ 0.        ,  0.30103   ,  0.60205999,  1.        ])

Вывод результатов вычислений в массив
-------------------------------------

    >>> x = np.arange(5)
    >>> x
    array([0, 1, 2, 3, 4])
    >>> y = np.empty(5)
    >>> y
    array([ 0.,  0.,  0.,  0.,  0.])
    >>> np.multiply(x, 10, out=y)
    array([  0.,  10.,  20.,  30.,  40.])
    >>> y
    array([  0.,  10.,  20.,  30.,  40.])

Вывод результатов вычислений в срез массива
-------------------------------------------

    >>> y = np.zeros(10)
    >>> y
    array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
    >>> np.power(2, x, out=y[::2])
    array([  1.,   2.,   4.,   8.,  16.])
    >>> y
    array([  1.,   0.,   2.,   0.,   4.,   0.,   8.,   0.,  16.,   0.])


"""
