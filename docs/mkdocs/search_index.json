{
    "docs": [
        {
            "location": "/",
            "text": "\u041f\u0440\u0438\u0432\u0435\u0442",
            "title": "\u041f\u0440\u0438\u0432\u0435\u0442"
        },
        {
            "location": "/#_1",
            "text": "",
            "title": "\u041f\u0440\u0438\u0432\u0435\u0442"
        },
        {
            "location": "/optimization/marketing/",
            "text": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0435\n\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n\n\u0414\u0430\u043d\u043e:\n    \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0430: $5 \u0437\u0430 \u043c\u0438\u043d\u0443\u0442\u0443\n    \u0422\u0435\u043b\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u0430: $30 \u0437\u0430 \u043c\u0438\u043d\u0443\u0442\u0443\n    \u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0443 \u0432 3 \u0440\u0430\u0437\u0430 \u0447\u0430\u0449\u0435 \u0447\u0435\u043c \u0422\u0435\u043b\u0435 \u0440\u0435\u043b\u0430\u043c\u0443\n    1 \u043c\u0438\u043d\u0443\u0442\u0430 \u0422\u0435\u043b\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u044b \u043f\u0440\u0438\u043d\u043e\u0441\u0438\u0442 \u043f\u0440\u043e\u0434\u0430\u0436 \u0432 30 \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 1 \u043c\u0438\u043d\u0443\u0442\u0430 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n\n\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:  \n\n    x1 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0422\u0435\u043b\u0435 \u0420\u0435\u043a\u043b\u0430\u043c\u044b\n    x2 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \n    $30 x1 + x2\n\n\n\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0431\u0443\u0434\u0436\u0435\u0442\u0443: \n    $90 x1 + $5 x2 <= $10000    \n\n\n\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0430\u0437\u0430:\n    x2 = 3 x1\n\n\n\u041d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 x1, x2, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\n\n>>> import pulp\n\n>>> problem = pulp.LpProblem('\u0423\u0432\u0435\u043b\u0438\u0447\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0430\u0436', pulp.LpMaximize)\n\n>>> x1 = pulp.LpVariable('x1', 0)\n>>> x2 = pulp.LpVariable('x2', 0)\n\n>>> problem += 30 * x1 + x2, '\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436'\n>>> problem += 90 * x1 + 5 * x2 <= 10000, '\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0431\u044e\u0434\u0436\u0435\u0442\u0443'\n>>> problem += x2 == 3 * x1, '\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0430\u0437\u0430'\n>>> problem.solve()\n1\n\n>>> pulp.LpStatus[problem.status]\n'Optimal'\n\n\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\n\n\n>>> for v in problem.variables():\n...     '{}={}'.format(v.name, v.varValue)\n'x1=95.238095'\n'x2=285.71429'\n\n\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0444\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\n\n\n>>> pulp.value(problem.objective)\n3142.85714",
            "title": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0435"
        },
        {
            "location": "/optimization/marketing/#_1",
            "text": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.  \u0414\u0430\u043d\u043e:\n    \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0430: $5 \u0437\u0430 \u043c\u0438\u043d\u0443\u0442\u0443\n    \u0422\u0435\u043b\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u0430: $30 \u0437\u0430 \u043c\u0438\u043d\u0443\u0442\u0443\n    \u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0443 \u0432 3 \u0440\u0430\u0437\u0430 \u0447\u0430\u0449\u0435 \u0447\u0435\u043c \u0422\u0435\u043b\u0435 \u0440\u0435\u043b\u0430\u043c\u0443\n    1 \u043c\u0438\u043d\u0443\u0442\u0430 \u0422\u0435\u043b\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u044b \u043f\u0440\u0438\u043d\u043e\u0441\u0438\u0442 \u043f\u0440\u043e\u0434\u0430\u0436 \u0432 30 \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 1 \u043c\u0438\u043d\u0443\u0442\u0430 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u044b  \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:   \n    x1 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0422\u0435\u043b\u0435 \u0420\u0435\u043a\u043b\u0430\u043c\u044b\n    x2 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0420\u0430\u0434\u0438\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u044b  \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \n    $30 x1 + x2  \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0431\u0443\u0434\u0436\u0435\u0442\u0443: \n    $90 x1 + $5 x2 <= $10000      \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0430\u0437\u0430:\n    x2 = 3 x1  \u041d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 x1, x2, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430  >>> import pulp\n\n>>> problem = pulp.LpProblem('\u0423\u0432\u0435\u043b\u0438\u0447\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0430\u0436', pulp.LpMaximize)\n\n>>> x1 = pulp.LpVariable('x1', 0)\n>>> x2 = pulp.LpVariable('x2', 0)\n\n>>> problem += 30 * x1 + x2, '\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436'\n>>> problem += 90 * x1 + 5 * x2 <= 10000, '\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0431\u044e\u0434\u0436\u0435\u0442\u0443'\n>>> problem += x2 == 3 * x1, '\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u043a\u0430\u0437\u0430'\n>>> problem.solve()\n1\n\n>>> pulp.LpStatus[problem.status]\n'Optimal'  \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:  >>> for v in problem.variables():\n...     '{}={}'.format(v.name, v.varValue)\n'x1=95.238095'\n'x2=285.71429'  \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0444\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:  >>> pulp.value(problem.objective)\n3142.85714",
            "title": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0435"
        },
        {
            "location": "/optimization/souvenirs/",
            "text": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u044e\u043a\u0437\u0430\u043a\u0435\n\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:\n\n\n\u0411\u0443\u0442\u044b\u043b\u043a\u0430 \u0432\u043e\u0434\u043a\u0438: $17, 1.5\u043a\u0433\n\u041c\u0430\u0442\u0440\u0435\u0448\u043a\u0430: $30, 2.5\u043a\u0433\n\u0411\u0430\u043b\u0430\u043b\u0430\u0439\u043a\u0430: $75, 6\u043a\u0433\n\nx1 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0411\u0443\u0442\u044b\u043b\u043e\u043a \u0432\u043e\u0434\u043a\u0438\nx2 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u041c\u0430\u0442\u0440\u0435\u0448\u0435\u043a\nx3 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0411\u0430\u043b\u0430\u043b\u0430\u0435\u043a\n\n\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \n    $17 x1 + $30 x2 + $75 x3\n\n\n\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0435\u0441\u0443: \n    1.5\u043a\u0433 x1 + 2.5\u043a\u0433 x2 + 6\u043a\u0433 x3 <= 20\u043a\u0433    \n\n\n\u041d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 x1, x2, x3 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\n\n\n>>> import pulp\n\n>>> problem = pulp.LpProblem('\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0420\u044e\u043a\u0437\u0430\u043a\u0435', pulp.LpMaximize)\n\n>>> x1 = pulp.LpVariable('x1', 0, 10, 'Integer')\n>>> x2 = pulp.LpVariable('x2', 0, 10, 'Integer')\n>>> x3 = pulp.LpVariable('x3', 0, 10, 'Integer')\n\n>>> problem += 17 * x1 + 30 * x2 + 75 * x3, '\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'\n>>> problem += 1.5 * x1 + 2.5 * x2 + 6 * x3 <= 20, '\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0435\u0441\u0443'    \n>>> problem.solve()\n1\n\n>>> pulp.LpStatus[problem.status]\n'Optimal'\n\n\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\n\n\n>>> for v in problem.variables():\n...     '{}={}'.format(v.name, v.varValue)\n'x1=2.0'\n'x2=2.0'\n'x3=2.0'\n\n\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0444\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\n\n\n>>> pulp.value(problem.objective)\n244.0",
            "title": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u044e\u043a\u0437\u0430\u043a\u0435"
        },
        {
            "location": "/optimization/souvenirs/#_1",
            "text": "\u0417\u0430\u0434\u0430\u0447\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.  \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:  \u0411\u0443\u0442\u044b\u043b\u043a\u0430 \u0432\u043e\u0434\u043a\u0438: $17, 1.5\u043a\u0433\n\u041c\u0430\u0442\u0440\u0435\u0448\u043a\u0430: $30, 2.5\u043a\u0433\n\u0411\u0430\u043b\u0430\u043b\u0430\u0439\u043a\u0430: $75, 6\u043a\u0433\n\nx1 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0411\u0443\u0442\u044b\u043b\u043e\u043a \u0432\u043e\u0434\u043a\u0438\nx2 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u041c\u0430\u0442\u0440\u0435\u0448\u0435\u043a\nx3 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0411\u0430\u043b\u0430\u043b\u0430\u0435\u043a  \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \n    $17 x1 + $30 x2 + $75 x3  \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0435\u0441\u0443: \n    1.5\u043a\u0433 x1 + 2.5\u043a\u0433 x2 + 6\u043a\u0433 x3 <= 20\u043a\u0433      \u041d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 x1, x2, x3 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430  >>> import pulp\n\n>>> problem = pulp.LpProblem('\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0420\u044e\u043a\u0437\u0430\u043a\u0435', pulp.LpMaximize)\n\n>>> x1 = pulp.LpVariable('x1', 0, 10, 'Integer')\n>>> x2 = pulp.LpVariable('x2', 0, 10, 'Integer')\n>>> x3 = pulp.LpVariable('x3', 0, 10, 'Integer')\n\n>>> problem += 17 * x1 + 30 * x2 + 75 * x3, '\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'\n>>> problem += 1.5 * x1 + 2.5 * x2 + 6 * x3 <= 20, '\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0435\u0441\u0443'    \n>>> problem.solve()\n1\n\n>>> pulp.LpStatus[problem.status]\n'Optimal'  \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:  >>> for v in problem.variables():\n...     '{}={}'.format(v.name, v.varValue)\n'x1=2.0'\n'x2=2.0'\n'x3=2.0'  \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0444\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:  >>> pulp.value(problem.objective)\n244.0",
            "title": "\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u044e\u043a\u0437\u0430\u043a\u0435"
        },
        {
            "location": "/examples/normalvariate/",
            "text": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u0435\n\n\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435: \u0440\u043e\u0441\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0441\u0442\u0440\u0435\u043b\u044c\u0431\u0435, \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f:\n    - \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (m) - \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435\u043c\n    - \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\u043c (s)\n\n>>> import random\n>>> import matplotlib.pyplot as plt\n\n>>> y = [random.normalvariate(0, 1) for _ in range(10**3)]\n>>> plt.hist(y, 10)\n>>> plt.show()",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u0435"
        },
        {
            "location": "/examples/normalvariate/#_1",
            "text": "\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435: \u0440\u043e\u0441\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0441\u0442\u0440\u0435\u043b\u044c\u0431\u0435, \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f:\n    - \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (m) - \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435\u043c\n    - \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\u043c (s)\n\n>>> import random\n>>> import matplotlib.pyplot as plt\n\n>>> y = [random.normalvariate(0, 1) for _ in range(10**3)]\n>>> plt.hist(y, 10)\n>>> plt.show()",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u0435"
        },
        {
            "location": "/examples/uniform_hist/",
            "text": "\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n\n\n>>> import matplotlib.pyplot as plt\n>>> import random\n\n>>> y = [random.random() for _ in range(10**3)]\n\n>>> plt.hist(y, 20)\n>>> plt.show()",
            "title": "\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f"
        },
        {
            "location": "/examples/uniform_hist/#_1",
            "text": ">>> import matplotlib.pyplot as plt\n>>> import random\n\n>>> y = [random.random() for _ in range(10**3)]\n\n>>> plt.hist(y, 20)\n>>> plt.show()",
            "title": "\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f"
        },
        {
            "location": "/examples/uniform/",
            "text": "\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n\n\n\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 (uniform) \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n\n\n>>> import random\n>>> import matplotlib.pyplot as plt\n\n>>> n = 500\n>>> x = range(n)\n>>> y = [random.uniform(-1, 1) for _ in range(n)]\n\n>>> plt.plot(x, y, 'o')\n>>> plt.show()",
            "title": "\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/examples/uniform/#_1",
            "text": "\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 (uniform) \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b  >>> import random\n>>> import matplotlib.pyplot as plt\n\n>>> n = 500\n>>> x = range(n)\n>>> y = [random.uniform(-1, 1) for _ in range(n)]\n\n>>> plt.plot(x, y, 'o')\n>>> plt.show()",
            "title": "\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/np/arrays_slices/",
            "text": "\u0421\u0440\u0435\u0437\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n\n\n>>> import numpy as np\n\n>>> x = np.arange(10)\n>>> x[0]\n0\n>>> x[::-1]\narray([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n>>> x[::2]\narray([0, 2, 4, 6, 8])\n>>> x[::3]\narray([0, 3, 6, 9])\n\n>>> np.random.seed(2)\n>>> x = np.random.randint(10, size=(3, 3))\n>>> x\narray([[8, 8, 6],\n       [2, 8, 7],\n       [2, 1, 5]])\n\n\n\n\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n\n\n>>> x[0, :]\narray([8, 8, 6])\n\n>>> x[1, :]\narray([2, 8, 7])\n\n>>> x[2, :]\narray([2, 1, 5])\n\n\n\n\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446)\n\n\n>>> x[:, 0]\narray([8, 2, 2])\n\n\n\n\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 1-\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n\n\n>>> x[:, 1]\narray([8, 8, 1])\n\n\n\n\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 2-\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n\n\n>>> x[:, 2]\narray([6, 7, 5])\n\n\n\n\u0421\u0440\u0435\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 1 \u0441\u0442\u043e\u043b\u0431\u0435\u0446)\n\n\n>>> x[:, :1]\narray([[8],\n       [2],\n       [2]])\n\n\n\n\u0421\u0440\u0435\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 2 \u0441\u0442\u043e\u043b\u0431\u0446\u0430)\n\n\n>>> x[:, :2]\narray([[8, 8],\n       [2, 8],\n       [2, 1]])\n\n>>> x[:2, :]\narray([[8, 8, 6],\n       [2, 8, 7]])\n\n>>> x[:2, :2]\narray([[8, 8],\n       [2, 8]])",
            "title": "\u0421\u0440\u0435\u0437\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432"
        },
        {
            "location": "/np/arrays_slices/#_1",
            "text": ">>> import numpy as np\n\n>>> x = np.arange(10)\n>>> x[0]\n0\n>>> x[::-1]\narray([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n>>> x[::2]\narray([0, 2, 4, 6, 8])\n>>> x[::3]\narray([0, 3, 6, 9])\n\n>>> np.random.seed(2)\n>>> x = np.random.randint(10, size=(3, 3))\n>>> x\narray([[8, 8, 6],\n       [2, 8, 7],\n       [2, 1, 5]])  \u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432  >>> x[0, :]\narray([8, 8, 6])\n\n>>> x[1, :]\narray([2, 8, 7])\n\n>>> x[2, :]\narray([2, 1, 5])  \u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446)  >>> x[:, 0]\narray([8, 2, 2])  \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 1-\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446  >>> x[:, 1]\narray([8, 8, 1])  \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 2-\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446  >>> x[:, 2]\narray([6, 7, 5])  \u0421\u0440\u0435\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 1 \u0441\u0442\u043e\u043b\u0431\u0435\u0446)  >>> x[:, :1]\narray([[8],\n       [2],\n       [2]])  \u0421\u0440\u0435\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (\u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, 2 \u0441\u0442\u043e\u043b\u0431\u0446\u0430)  >>> x[:, :2]\narray([[8, 8],\n       [2, 8],\n       [2, 1]])\n\n>>> x[:2, :]\narray([[8, 8, 6],\n       [2, 8, 7]])\n\n>>> x[:2, :2]\narray([[8, 8],\n       [2, 8]])",
            "title": "\u0421\u0440\u0435\u0437\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432"
        },
        {
            "location": "/np/boolean_logic/",
            "text": "\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n\n\n\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 bool \u043c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\n>>> import numpy as np\n\n>>> x = np.array([1, 2, 3, 4, 5])\n>>> x > 3\narray([False, False, False,  True,  True], dtype=bool)\n>>> x < 3\narray([ True,  True, False, False, False], dtype=bool)\n>>> x >= 3\narray([False, False,  True,  True,  True], dtype=bool)\n>>> x == 3\narray([False, False,  True, False, False], dtype=bool)\n>>> (2 * x) == (x ** 2)\narray([False,  True, False, False, False], dtype=bool)\n\n\n\n\u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n\n\n>>> x = np.array([[5, 0, 3, 3],\n...               [7, 9, 3, 5],\n...               [2, 4, 7, 6]])\n\n>>> np.count_nonzero(x < 6)\n8\n>>> np.sum(x < 6)\n8\n>>> np.sum(x < 6, axis=0)\narray([2, 2, 2, 2])\n>>> np.sum(x < 6, axis=1)\narray([4, 2, 2])\n\n>>> np.any(x > 8)\nTrue\n>>> np.all(x < 10)\nTrue\n>>> np.all(x < 8, axis=1)\narray([ True, False,  True], dtype=bool)",
            "title": "\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"
        },
        {
            "location": "/np/boolean_logic/#_1",
            "text": "\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 bool \u043c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.  >>> import numpy as np\n\n>>> x = np.array([1, 2, 3, 4, 5])\n>>> x > 3\narray([False, False, False,  True,  True], dtype=bool)\n>>> x < 3\narray([ True,  True, False, False, False], dtype=bool)\n>>> x >= 3\narray([False, False,  True,  True,  True], dtype=bool)\n>>> x == 3\narray([False, False,  True, False, False], dtype=bool)\n>>> (2 * x) == (x ** 2)\narray([False,  True, False, False, False], dtype=bool)  \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432  >>> x = np.array([[5, 0, 3, 3],\n...               [7, 9, 3, 5],\n...               [2, 4, 7, 6]])\n\n>>> np.count_nonzero(x < 6)\n8\n>>> np.sum(x < 6)\n8\n>>> np.sum(x < 6, axis=0)\narray([2, 2, 2, 2])\n>>> np.sum(x < 6, axis=1)\narray([4, 2, 2])\n\n>>> np.any(x > 8)\nTrue\n>>> np.all(x < 10)\nTrue\n>>> np.all(x < 8, axis=1)\narray([ True, False,  True], dtype=bool)",
            "title": "\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"
        },
        {
            "location": "/np/broadcasting/",
            "text": "Broadcasting\n\n\n\u041c\u0430\u0441\u0441\u0438\u0432\u044b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e.\n\n\n>>> import numpy as np\n>>> a = np.array([1, 2, 3])\n>>> b = np.array([2, 2, 2])\n>>> a + b\narray([3, 4, 5])\n\n\n\n\u041c\u0430\u0441\u0441\u0438\u0432\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043e\u043c \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e.\n\n\n>>> a + 1\narray([2, 3, 4])\n\n\n\n\u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043e\u043c.\n\n\n>>> c = np.array([\n...     [1, 2, 3],\n...     [2, 2, 2],\n...     [3, 2, 1]\n... ])\n\n>>> c + 1\narray([[2, 3, 4],\n       [3, 3, 3],\n       [4, 3, 2]])\n\n\n\n\u041f\u0440\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0438\u0438 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n\n\n>>> a\narray([1, 2, 3])\n\n>>> m = np.ones((3, 3))\n>>> m\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>> m + a\narray([[ 2.,  3.,  4.],\n       [ 2.,  3.,  4.],\n       [ 2.,  3.,  4.]])\n\n\n\n\u0421\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430-\u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430-\u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\n\n>>> a = np.arange(3)\n>>> b = np.arange(3)[:, np.newaxis]\n>>> a\narray([0, 1, 2])\n>>> b\narray([[0],\n       [1],\n       [2]])\n>>> a + b\narray([[0, 1, 2],\n       [1, 2, 3],\n       [2, 3, 4]])",
            "title": "Broadcasting"
        },
        {
            "location": "/np/broadcasting/#broadcasting",
            "text": "\u041c\u0430\u0441\u0441\u0438\u0432\u044b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e.  >>> import numpy as np\n>>> a = np.array([1, 2, 3])\n>>> b = np.array([2, 2, 2])\n>>> a + b\narray([3, 4, 5])  \u041c\u0430\u0441\u0441\u0438\u0432\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043e\u043c \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e.  >>> a + 1\narray([2, 3, 4])  \u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043e\u043c.  >>> c = np.array([\n...     [1, 2, 3],\n...     [2, 2, 2],\n...     [3, 2, 1]\n... ])\n\n>>> c + 1\narray([[2, 3, 4],\n       [3, 3, 3],\n       [4, 3, 2]])  \u041f\u0440\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0438\u0438 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432  >>> a\narray([1, 2, 3])\n\n>>> m = np.ones((3, 3))\n>>> m\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>> m + a\narray([[ 2.,  3.,  4.],\n       [ 2.,  3.,  4.],\n       [ 2.,  3.,  4.]])  \u0421\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430-\u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430-\u0441\u0442\u043e\u043b\u0431\u0446\u0430  >>> a = np.arange(3)\n>>> b = np.arange(3)[:, np.newaxis]\n>>> a\narray([0, 1, 2])\n>>> b\narray([[0],\n       [1],\n       [2]])\n>>> a + b\narray([[0, 1, 2],\n       [1, 2, 3],\n       [2, 3, 4]])",
            "title": "Broadcasting"
        },
        {
            "location": "/np/arrays_creation/",
            "text": "\u041c\u0430\u0441\u0441\u0438\u0432\u044b Numpy\n\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e numpy\n\n\n>>> import numpy as np\n\n\n\n1D array\n\n\n>>> np.array([1, 2, 3])\narray([1, 2, 3])\n\n\n\n2D array\n\n\n>>> np.array([[1, 2, 3],\n...           [4, 5, 6],\n...           [7, 8, 9]])\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nZeros\n\n\n>>> np.zeros(5, dtype=int)\narray([0, 0, 0, 0, 0])\n\n\n\nOnes\n\n\n>>> np.ones(3)\narray([ 1.,  1.,  1.])\n\n>>> np.ones((3, 5), dtype=int)\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])\n\n\n\nFull\n\n\n>>> np.full((2, 2), 3.14)\narray([[ 3.14,  3.14],\n       [ 3.14,  3.14]])\n\n\n\nArange\n\n\n>>> np.arange(0, 100, 20)\narray([ 0, 20, 40, 60, 80])\n\n\n\nLinspace\n\n\n>>> np.linspace(0, 100, 5, dtype=int)\narray([  0,  25,  50,  75, 100])\n\n\n\nRandom\n\n\n>>> np.random.seed(2)\n>>> np.random.random((3, 3))\narray([[ 0.4359949 ,  0.02592623,  0.54966248],\n       [ 0.43532239,  0.4203678 ,  0.33033482],\n       [ 0.20464863,  0.61927097,  0.29965467]])\n\n\n\nCreate a 3x3 array of normally distributed random values with mean 0 and standard deviation 1\n\n\n>>> np.random.seed(2)\n>>> np.random.normal(0, 1, (3, 3))\narray([[-0.41675785, -0.05626683, -2.1361961 ],\n       [ 1.64027081, -1.79343559, -0.84174737],\n       [ 0.50288142, -1.24528809, -1.05795222]])\n\n>>> np.random.seed(2)\n>>> np.random.randint(1, 10, (2, 2))\narray([[9, 9],\n       [7, 3]])\n\n>>> np.eye(3)\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n>>> np.empty(3)\narray([ 1.,  1.,  1.])",
            "title": "\u041c\u0430\u0441\u0441\u0438\u0432\u044b Numpy"
        },
        {
            "location": "/np/arrays_creation/#numpy",
            "text": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e numpy  >>> import numpy as np",
            "title": "\u041c\u0430\u0441\u0441\u0438\u0432\u044b Numpy"
        },
        {
            "location": "/np/arrays_creation/#1d-array",
            "text": ">>> np.array([1, 2, 3])\narray([1, 2, 3])",
            "title": "1D array"
        },
        {
            "location": "/np/arrays_creation/#2d-array",
            "text": ">>> np.array([[1, 2, 3],\n...           [4, 5, 6],\n...           [7, 8, 9]])\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])",
            "title": "2D array"
        },
        {
            "location": "/np/arrays_creation/#zeros",
            "text": ">>> np.zeros(5, dtype=int)\narray([0, 0, 0, 0, 0])",
            "title": "Zeros"
        },
        {
            "location": "/np/arrays_creation/#ones",
            "text": ">>> np.ones(3)\narray([ 1.,  1.,  1.])\n\n>>> np.ones((3, 5), dtype=int)\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])",
            "title": "Ones"
        },
        {
            "location": "/np/arrays_creation/#full",
            "text": ">>> np.full((2, 2), 3.14)\narray([[ 3.14,  3.14],\n       [ 3.14,  3.14]])",
            "title": "Full"
        },
        {
            "location": "/np/arrays_creation/#arange",
            "text": ">>> np.arange(0, 100, 20)\narray([ 0, 20, 40, 60, 80])",
            "title": "Arange"
        },
        {
            "location": "/np/arrays_creation/#linspace",
            "text": ">>> np.linspace(0, 100, 5, dtype=int)\narray([  0,  25,  50,  75, 100])",
            "title": "Linspace"
        },
        {
            "location": "/np/arrays_creation/#random",
            "text": ">>> np.random.seed(2)\n>>> np.random.random((3, 3))\narray([[ 0.4359949 ,  0.02592623,  0.54966248],\n       [ 0.43532239,  0.4203678 ,  0.33033482],\n       [ 0.20464863,  0.61927097,  0.29965467]])  Create a 3x3 array of normally distributed random values with mean 0 and standard deviation 1  >>> np.random.seed(2)\n>>> np.random.normal(0, 1, (3, 3))\narray([[-0.41675785, -0.05626683, -2.1361961 ],\n       [ 1.64027081, -1.79343559, -0.84174737],\n       [ 0.50288142, -1.24528809, -1.05795222]])\n\n>>> np.random.seed(2)\n>>> np.random.randint(1, 10, (2, 2))\narray([[9, 9],\n       [7, 3]])\n\n>>> np.eye(3)\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n>>> np.empty(3)\narray([ 1.,  1.,  1.])",
            "title": "Random"
        },
        {
            "location": "/np/example_color_map/",
            "text": "\u041f\u0440\u0438\u043c\u0435\u0440 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b\n\n\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(0, 5, 50)\n>>> y = np.linspace(0, 5, 50)[:, np.newaxis]\n>>> z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n>>> plt.imshow(z, origin='lower', extent=[0, 5, 0, 5], cmap='viridis')\n>>> plt.colorbar()\n>>> plt.show()",
            "title": "\u041f\u0440\u0438\u043c\u0435\u0440 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b"
        },
        {
            "location": "/np/example_color_map/#_1",
            "text": ">>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(0, 5, 50)\n>>> y = np.linspace(0, 5, 50)[:, np.newaxis]\n>>> z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n>>> plt.imshow(z, origin='lower', extent=[0, 5, 0, 5], cmap='viridis')\n>>> plt.colorbar()\n>>> plt.show()",
            "title": "\u041f\u0440\u0438\u043c\u0435\u0440 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b"
        },
        {
            "location": "/np/universal_functions/",
            "text": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\n\n\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0430\u043c\u0438\n\n\n>>> import numpy as np\n\n\n\n\u0412\u0435\u043a\u0442\u043e\u0440\n\n\n>>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4])\n\n\n\n\u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430 \u0441\u043a\u0430\u043b\u044f\u0440\n\n\n>>> x * 2\narray([0, 2, 4, 6, 8])\n\n>>> y = np.array([2, 2, 2, 2, 2])\n>>> y\narray([2, 2, 2, 2, 2])\n\n\n\n\u0423\u0441\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\n\n\n>>> x * y\narray([0, 2, 4, 6, 8])\n\n\n\n\u0412\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\n\n\n>>> a = np.arange(9).reshape((3, 3))\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n>>> a ** 2\narray([[ 0,  1,  4],\n       [ 9, 16, 25],\n       [36, 49, 64]])\n\n\n\n\u0427\u0430\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n\n\n>>> -(0.5 * a) ** 2\narray([[ -0.  ,  -0.25,  -1.  ],\n       [ -2.25,  -4.  ,  -6.25],\n       [ -9.  , -12.25, -16.  ]])\n\n\n\nABS\n\n\n\u041c\u043e\u0434\u0443\u043b\u0438 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\n\n\n>>> z = np.arange(-5, 0)\n>>> z\narray([-5, -4, -3, -2, -1])\n>>> abs(z)\narray([5, 4, 3, 2, 1])\n\n\n\n\u0412\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n\n\n>>> c = np.array([1 - 1j, 2 - 1j, -5 + 1j])\n>>> c\narray([ 1.-1.j,  2.-1.j, -5.+1.j])\n>>> abs(c)\narray([ 1.41421356,  2.23606798,  5.09901951])\n\n\n\n\u0422\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u044f\n\n\n>>> theta = np.linspace(0, np.pi, 3)\n>>> theta\narray([ 0.        ,  1.57079633,  3.14159265])\n>>> np.sin(theta)\narray([  0.00000000e+00,   1.00000000e+00,   1.22464680e-16])\n\n\n\n\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430\n\n\n>>> x = np.array([1, 2, 3])\n>>> np.exp(x)\narray([  2.71828183,   7.3890561 ,  20.08553692])\n>>> np.exp2(x)\narray([ 2.,  4.,  8.])\n\n\n\n\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\n\n\n>>> x = [1, 2, 4, 10]\n>>> np.log(x)\narray([ 0.        ,  0.69314718,  1.38629436,  2.30258509])\n>>> np.log2(x)\narray([ 0.        ,  1.        ,  2.        ,  3.32192809])\n>>> np.log10(x)\narray([ 0.        ,  0.30103   ,  0.60205999,  1.        ])\n\n\n\n\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n\n\n>>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4])\n>>> y = np.empty(5)\n>>> y\narray([ 0.,  0.,  0.,  0.,  0.])\n>>> np.multiply(x, 10, out=y)\narray([  0.,  10.,  20.,  30.,  40.])\n>>> y\narray([  0.,  10.,  20.,  30.,  40.])\n\n\n\n\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u0441\u0440\u0435\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\n\n>>> y = np.zeros(10)\n>>> y\narray([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])\n>>> np.power(2, x, out=y[::2])\narray([  1.,   2.,   4.,   8.,  16.])\n>>> y\narray([  1.,   0.,   2.,   0.,   4.,   0.,   8.,   0.,  16.,   0.])",
            "title": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"
        },
        {
            "location": "/np/universal_functions/#_1",
            "text": "",
            "title": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"
        },
        {
            "location": "/np/universal_functions/#_2",
            "text": ">>> import numpy as np  \u0412\u0435\u043a\u0442\u043e\u0440  >>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4])  \u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430 \u0441\u043a\u0430\u043b\u044f\u0440  >>> x * 2\narray([0, 2, 4, 6, 8])\n\n>>> y = np.array([2, 2, 2, 2, 2])\n>>> y\narray([2, 2, 2, 2, 2])  \u0423\u0441\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e  >>> x * y\narray([0, 2, 4, 6, 8])  \u0412\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442  >>> a = np.arange(9).reshape((3, 3))\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n>>> a ** 2\narray([[ 0,  1,  4],\n       [ 9, 16, 25],\n       [36, 49, 64]])  \u0427\u0430\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f  >>> -(0.5 * a) ** 2\narray([[ -0.  ,  -0.25,  -1.  ],\n       [ -2.25,  -4.  ,  -6.25],\n       [ -9.  , -12.25, -16.  ]])",
            "title": "\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0430\u043c\u0438"
        },
        {
            "location": "/np/universal_functions/#abs",
            "text": "\u041c\u043e\u0434\u0443\u043b\u0438 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430  >>> z = np.arange(-5, 0)\n>>> z\narray([-5, -4, -3, -2, -1])\n>>> abs(z)\narray([5, 4, 3, 2, 1])  \u0412\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b  >>> c = np.array([1 - 1j, 2 - 1j, -5 + 1j])\n>>> c\narray([ 1.-1.j,  2.-1.j, -5.+1.j])\n>>> abs(c)\narray([ 1.41421356,  2.23606798,  5.09901951])",
            "title": "ABS"
        },
        {
            "location": "/np/universal_functions/#_3",
            "text": ">>> theta = np.linspace(0, np.pi, 3)\n>>> theta\narray([ 0.        ,  1.57079633,  3.14159265])\n>>> np.sin(theta)\narray([  0.00000000e+00,   1.00000000e+00,   1.22464680e-16])",
            "title": "\u0422\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u044f"
        },
        {
            "location": "/np/universal_functions/#_4",
            "text": ">>> x = np.array([1, 2, 3])\n>>> np.exp(x)\narray([  2.71828183,   7.3890561 ,  20.08553692])\n>>> np.exp2(x)\narray([ 2.,  4.,  8.])",
            "title": "\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430"
        },
        {
            "location": "/np/universal_functions/#_5",
            "text": ">>> x = [1, 2, 4, 10]\n>>> np.log(x)\narray([ 0.        ,  0.69314718,  1.38629436,  2.30258509])\n>>> np.log2(x)\narray([ 0.        ,  1.        ,  2.        ,  3.32192809])\n>>> np.log10(x)\narray([ 0.        ,  0.30103   ,  0.60205999,  1.        ])",
            "title": "\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c"
        },
        {
            "location": "/np/universal_functions/#_6",
            "text": ">>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4])\n>>> y = np.empty(5)\n>>> y\narray([ 0.,  0.,  0.,  0.,  0.])\n>>> np.multiply(x, 10, out=y)\narray([  0.,  10.,  20.,  30.,  40.])\n>>> y\narray([  0.,  10.,  20.,  30.,  40.])",
            "title": "\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432"
        },
        {
            "location": "/np/universal_functions/#_7",
            "text": ">>> y = np.zeros(10)\n>>> y\narray([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])\n>>> np.power(2, x, out=y[::2])\narray([  1.,   2.,   4.,   8.,  16.])\n>>> y\narray([  1.,   0.,   2.,   0.,   4.,   0.,   8.,   0.,  16.,   0.])",
            "title": "\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u0441\u0440\u0435\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430"
        },
        {
            "location": "/np/aggregates/",
            "text": "\u0410\u0433\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\n\n>>> import numpy as np\n\n>>> x = np.arange(1, 6)\n>>> x\narray([1, 2, 3, 4, 5])\n\n>>> np.add.reduce(x)\n15\n\n>>> np.multiply.reduce(x)\n120\n\n>>> np.add.accumulate(x)\narray([ 1,  3,  6, 10, 15], dtype=int32)\n\n>>> np.multiply.accumulate(x)\narray([  1,   2,   6,  24, 120], dtype=int32)\n\n\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432\n\n\n>>> x = np.arange(1, 6)\n>>> x\narray([1, 2, 3, 4, 5])\n>>> y = np.array([2, 2, 2, 2, 2])\n>>> np.multiply.outer(x, y)\narray([[ 2,  2,  2,  2,  2],\n       [ 4,  4,  4,  4,  4],\n       [ 6,  6,  6,  6,  6],\n       [ 8,  8,  8,  8,  8],\n       [10, 10, 10, 10, 10]])\n\n\n\n\u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\n\n>>> np.random.seed(2)\n>>> big_array = np.random.rand(100000)\n>>> int(np.sum(big_array))\n49922\n>>> int(big_array.sum())\n49922\n\n\n\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\n\n\n>>> np.min(big_array)\n1.8354603294024052e-05\n>>> big_array.min()\n1.8354603294024052e-05\n\n>>> np.max(big_array)\n0.99998694190910009\n>>> big_array.max()\n0.99998694190910009\n\n\n\n\u0410\u0433\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446\n\n\n>>> np.random.seed(2)\n>>> m = np.random.random((3, 4))\n>>> m\narray([[ 0.4359949 ,  0.02592623,  0.54966248,  0.43532239],\n       [ 0.4203678 ,  0.33033482,  0.20464863,  0.61927097],\n       [ 0.29965467,  0.26682728,  0.62113383,  0.52914209]])\n\n\n\n\u0421\u0443\u043c\u043c\u0430\n\n\n>>> m.sum()\n4.7382861037704735\n>>> m.sum(axis=0)\narray([ 1.15601738,  0.62308833,  1.37544494,  1.58373545])\n>>> m.sum(axis=1)\narray([ 1.446906  ,  1.57462222,  1.71675788])\n\n\n\n\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\n\n\n>>> m.max(axis=0)\narray([ 0.4359949 ,  0.33033482,  0.62113383,  0.61927097])\n\n\n\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c\n\n\n>>> m.min(axis=1)\narray([ 0.02592623,  0.20464863,  0.26682728])\n\n\n\n\u041f\u0440\u043e\u0434\u0443\u043a\u0442\n\n\n>>> x = np.arange(1, 10).reshape([3, 3])\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n>>> x.prod()\n362880\n\n\n\nAny, All\n\n\n>>> np.random.seed(2)\n>>> b = np.array([np.random.randint(2) for _ in range(5)])\n>>> b\narray([0, 1, 1, 0, 0])\n>>> b.any()\nTrue\n>>> b.all()\nFalse\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\n>>> heights = np.array([189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175])\n>>> heights.min()\n163\n>>> heights.max()\n189\n>>> heights.sum()\n2295\n>>> heights.mean()\n176.53846153846155\n>>> heights.std()\n8.0155174948383188\n>>> np.percentile(heights, 25)\n171.0\n>>> np.median(heights)\n173.0",
            "title": "\u0410\u0433\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"
        },
        {
            "location": "/np/aggregates/#_1",
            "text": ">>> import numpy as np\n\n>>> x = np.arange(1, 6)\n>>> x\narray([1, 2, 3, 4, 5])\n\n>>> np.add.reduce(x)\n15\n\n>>> np.multiply.reduce(x)\n120\n\n>>> np.add.accumulate(x)\narray([ 1,  3,  6, 10, 15], dtype=int32)\n\n>>> np.multiply.accumulate(x)\narray([  1,   2,   6,  24, 120], dtype=int32)",
            "title": "\u0410\u0433\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"
        },
        {
            "location": "/np/aggregates/#_2",
            "text": ">>> x = np.arange(1, 6)\n>>> x\narray([1, 2, 3, 4, 5])\n>>> y = np.array([2, 2, 2, 2, 2])\n>>> np.multiply.outer(x, y)\narray([[ 2,  2,  2,  2,  2],\n       [ 4,  4,  4,  4,  4],\n       [ 6,  6,  6,  6,  6],\n       [ 8,  8,  8,  8,  8],\n       [10, 10, 10, 10, 10]])",
            "title": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432"
        },
        {
            "location": "/np/aggregates/#_3",
            "text": ">>> np.random.seed(2)\n>>> big_array = np.random.rand(100000)\n>>> int(np.sum(big_array))\n49922\n>>> int(big_array.sum())\n49922",
            "title": "\u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430"
        },
        {
            "location": "/np/aggregates/#_4",
            "text": ">>> np.min(big_array)\n1.8354603294024052e-05\n>>> big_array.min()\n1.8354603294024052e-05\n\n>>> np.max(big_array)\n0.99998694190910009\n>>> big_array.max()\n0.99998694190910009",
            "title": "\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c"
        },
        {
            "location": "/np/aggregates/#_5",
            "text": ">>> np.random.seed(2)\n>>> m = np.random.random((3, 4))\n>>> m\narray([[ 0.4359949 ,  0.02592623,  0.54966248,  0.43532239],\n       [ 0.4203678 ,  0.33033482,  0.20464863,  0.61927097],\n       [ 0.29965467,  0.26682728,  0.62113383,  0.52914209]])  \u0421\u0443\u043c\u043c\u0430  >>> m.sum()\n4.7382861037704735\n>>> m.sum(axis=0)\narray([ 1.15601738,  0.62308833,  1.37544494,  1.58373545])\n>>> m.sum(axis=1)\narray([ 1.446906  ,  1.57462222,  1.71675788])  \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c  >>> m.max(axis=0)\narray([ 0.4359949 ,  0.33033482,  0.62113383,  0.61927097])  \u041c\u0438\u043d\u0438\u043c\u0443\u043c  >>> m.min(axis=1)\narray([ 0.02592623,  0.20464863,  0.26682728])  \u041f\u0440\u043e\u0434\u0443\u043a\u0442  >>> x = np.arange(1, 10).reshape([3, 3])\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n>>> x.prod()\n362880",
            "title": "\u0410\u0433\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446"
        },
        {
            "location": "/np/aggregates/#any-all",
            "text": ">>> np.random.seed(2)\n>>> b = np.array([np.random.randint(2) for _ in range(5)])\n>>> b\narray([0, 1, 1, 0, 0])\n>>> b.any()\nTrue\n>>> b.all()\nFalse",
            "title": "Any, All"
        },
        {
            "location": "/np/aggregates/#_6",
            "text": ">>> heights = np.array([189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175])\n>>> heights.min()\n163\n>>> heights.max()\n189\n>>> heights.sum()\n2295\n>>> heights.mean()\n176.53846153846155\n>>> heights.std()\n8.0155174948383188\n>>> np.percentile(heights, 25)\n171.0\n>>> np.median(heights)\n173.0",
            "title": "\u041f\u0440\u0438\u043c\u0435\u0440"
        },
        {
            "location": "/np/arrays_split_concat/",
            "text": "\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n\n\n\u041a\u043e\u043f\u0438\u044f \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\n\n>>> import numpy as np\n\n>>> np.random.seed(2)\n>>> x = np.random.randint(1, 10, size=(3, 3))\n>>> x\narray([[9, 9, 7],\n       [3, 9, 8],\n       [3, 2, 6]])\n\n>>> y = x[:2, :2].copy()\n>>> y\narray([[9, 9],\n       [3, 9]])\n\n\n\nReshaping\n\n\n>>> x = np.arange(1, 10)\n>>> x\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n>>> x.reshape((3, 3))\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\n\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f\n\n\n>>> x = np.arange(1, 5)\n>>> x\narray([1, 2, 3, 4])\n\n>>> y = np.arange(20, 25)\n>>> y\narray([20, 21, 22, 23, 24])\n\n>>> np.concatenate([x, y])\narray([ 1,  2,  3,  4, 20, 21, 22, 23, 24])\n\n\n\n\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u044d\u043a\n\n\n>>> np.vstack([x, x])\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])\n\n\n\n\u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u044d\u043a\n\n\n>>> x = np.array([[1, 2, 3], [1, 2, 3]])\n>>> x\narray([[1, 2, 3],\n       [1, 2, 3]])\n>>> y = np.array([[4], [4]])\n>>> y\narray([[4],\n       [4]])\n>>> z = np.hstack([x, y])\n>>> z\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])\n\n\n\n\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\n\n>>> x = np.arange(10)\n>>> x\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> x1, x2 = np.split(x, 2)\n>>> x1\narray([0, 1, 2, 3, 4])\n>>> x2\narray([5, 6, 7, 8, 9])\n\n\n\n\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n\n\n>>> x = np.arange(16).reshape((4, 4))\n>>> x\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n>>> x1, x2 = np.vsplit(x, 2)\n>>> x1\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n>>> x2\narray([[ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n\n\n\n\u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n\n\n>>> a = np.arange(3)\n>>> a\narray([0, 1, 2])\n>>> b = np.arange(4, 7)\n>>> b\narray([4, 5, 6])\n>>> z = np.vstack([a, b])\n>>> z\narray([[0, 1, 2],\n       [4, 5, 6]])\n>>> z1, z2 = np.hsplit(z, [2])\n>>> z1\narray([[0, 1],\n       [4, 5]])\n>>> z2\narray([[2],\n       [6]])",
            "title": "\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/np/arrays_split_concat/#_1",
            "text": "",
            "title": "\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/np/arrays_split_concat/#_2",
            "text": ">>> import numpy as np\n\n>>> np.random.seed(2)\n>>> x = np.random.randint(1, 10, size=(3, 3))\n>>> x\narray([[9, 9, 7],\n       [3, 9, 8],\n       [3, 2, 6]])\n\n>>> y = x[:2, :2].copy()\n>>> y\narray([[9, 9],\n       [3, 9]])",
            "title": "\u041a\u043e\u043f\u0438\u044f \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430"
        },
        {
            "location": "/np/arrays_split_concat/#reshaping",
            "text": ">>> x = np.arange(1, 10)\n>>> x\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n>>> x.reshape((3, 3))\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])",
            "title": "Reshaping"
        },
        {
            "location": "/np/arrays_split_concat/#_3",
            "text": ">>> x = np.arange(1, 5)\n>>> x\narray([1, 2, 3, 4])\n\n>>> y = np.arange(20, 25)\n>>> y\narray([20, 21, 22, 23, 24])\n\n>>> np.concatenate([x, y])\narray([ 1,  2,  3,  4, 20, 21, 22, 23, 24])",
            "title": "\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f"
        },
        {
            "location": "/np/arrays_split_concat/#_4",
            "text": ">>> np.vstack([x, x])\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])",
            "title": "\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u044d\u043a"
        },
        {
            "location": "/np/arrays_split_concat/#_5",
            "text": ">>> x = np.array([[1, 2, 3], [1, 2, 3]])\n>>> x\narray([[1, 2, 3],\n       [1, 2, 3]])\n>>> y = np.array([[4], [4]])\n>>> y\narray([[4],\n       [4]])\n>>> z = np.hstack([x, y])\n>>> z\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])",
            "title": "\u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u044d\u043a"
        },
        {
            "location": "/np/arrays_split_concat/#_6",
            "text": ">>> x = np.arange(10)\n>>> x\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> x1, x2 = np.split(x, 2)\n>>> x1\narray([0, 1, 2, 3, 4])\n>>> x2\narray([5, 6, 7, 8, 9])",
            "title": "\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430"
        },
        {
            "location": "/np/arrays_split_concat/#_7",
            "text": ">>> x = np.arange(16).reshape((4, 4))\n>>> x\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n>>> x1, x2 = np.vsplit(x, 2)\n>>> x1\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n>>> x2\narray([[ 8,  9, 10, 11],\n       [12, 13, 14, 15]])",
            "title": "\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/np/arrays_split_concat/#_8",
            "text": ">>> a = np.arange(3)\n>>> a\narray([0, 1, 2])\n>>> b = np.arange(4, 7)\n>>> b\narray([4, 5, 6])\n>>> z = np.vstack([a, b])\n>>> z\narray([[0, 1, 2],\n       [4, 5, 6]])\n>>> z1, z2 = np.hsplit(z, [2])\n>>> z1\narray([[0, 1],\n       [4, 5]])\n>>> z2\narray([[2],\n       [6]])",
            "title": "\u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435"
        }
    ]
}